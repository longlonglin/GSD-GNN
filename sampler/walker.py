# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _walker
else:
    import _walker

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class csr_matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    indices = property(_walker.csr_matrix_indices_get, _walker.csr_matrix_indices_set)
    indptr = property(_walker.csr_matrix_indptr_get, _walker.csr_matrix_indptr_set)
    data = property(_walker.csr_matrix_data_get, _walker.csr_matrix_data_set)

    def __init__(self, indices_: "IntVector", indptr_: "SIntVector", data_: "FloatVector"):
        _walker.csr_matrix_swiginit(self, _walker.new_csr_matrix(indices_, indptr_, data_))
    __swig_destroy__ = _walker.delete_csr_matrix

# Register csr_matrix in _walker:
_walker.csr_matrix_swigregister(csr_matrix)

class BinaryGraphWalker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, indices_: "UIntVector", indptr_: "UIntVector", num_node_: "int"):
        _walker.BinaryGraphWalker_swiginit(self, _walker.new_BinaryGraphWalker(indices_, indptr_, num_node_))
    indices = property(_walker.BinaryGraphWalker_indices_get)
    indptr = property(_walker.BinaryGraphWalker_indptr_get)
    num_node = property(_walker.BinaryGraphWalker_num_node_get, _walker.BinaryGraphWalker_num_node_set)
    counter_merged = property(_walker.BinaryGraphWalker_counter_merged_get, _walker.BinaryGraphWalker_counter_merged_set)

    def samplePath(self, u: "VertexId const", v: "VertexId const", r: "int", seed: "unsigned int *", sampled_pair: "std::vector< VertexPair,std::allocator< VertexPair > > &") -> "void":
        return _walker.BinaryGraphWalker_samplePath(self, u, v, r, seed, sampled_pair)

    def randomWalk(self, u: "VertexId", step: "int", seed: "unsigned int *") -> "VertexId":
        return _walker.BinaryGraphWalker_randomWalk(self, u, step, seed)

    def sampling(self, round: "int", num_threads: "int", check_point: "int", window_size: "int", w: "double", p: "double") -> "csr_matrix":
        return _walker.BinaryGraphWalker_sampling(self, round, num_threads, check_point, window_size, w, p)

    def turn_to_csr(self, indices: "IntVector", indptr: "SIntVector", data: "FloatVector", degree_new: "SIntVector", num_edge_new: "size_t", counter_merged: "std::vector< ValuedVertexPair,std::allocator< ValuedVertexPair > > *") -> "void":
        return _walker.BinaryGraphWalker_turn_to_csr(self, indices, indptr, data, degree_new, num_edge_new, counter_merged)

    def merge(self, counter: "std::vector< ValuedVertexPair,std::allocator< ValuedVertexPair > > const &", tmp: "std::vector< ValuedVertexPair,std::allocator< ValuedVertexPair > > &", sampled_pairs: "std::vector< VertexPair,std::allocator< VertexPair > > &") -> "float":
        return _walker.BinaryGraphWalker_merge(self, counter, tmp, sampled_pairs)

    def merge_counters(self, counter: "std::vector< ValuedVertexPair,std::allocator< ValuedVertexPair > > const &", counter_other: "std::vector< ValuedVertexPair,std::allocator< ValuedVertexPair > > const &") -> "std::vector< ValuedVertexPair,std::allocator< ValuedVertexPair > > *":
        return _walker.BinaryGraphWalker_merge_counters(self, counter, counter_other)

    @staticmethod
    def run(indices_: "UIntVector", indptr_: "UIntVector", num_node_: "int", num_round: "int", window_size: "int", w: "double", p: "double") -> "csr_matrix":
        return _walker.BinaryGraphWalker_run(indices_, indptr_, num_node_, num_round, window_size, w, p)
    __swig_destroy__ = _walker.delete_BinaryGraphWalker

# Register BinaryGraphWalker in _walker:
_walker.BinaryGraphWalker_swigregister(BinaryGraphWalker)

def BinaryGraphWalker_run(indices_: "UIntVector", indptr_: "UIntVector", num_node_: "int", num_round: "int", window_size: "int", w: "double", p: "double") -> "csr_matrix":
    return _walker.BinaryGraphWalker_run(indices_, indptr_, num_node_, num_round, window_size, w, p)

class StepSelector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, steps_list: "IntVector", probs: "std::vector< double,std::allocator< double > > &"):
        _walker.StepSelector_swiginit(self, _walker.new_StepSelector(steps_list, probs))

    def select_step(self) -> "int":
        return _walker.StepSelector_select_step(self)
    __swig_destroy__ = _walker.delete_StepSelector

# Register StepSelector in _walker:
_walker.StepSelector_swigregister(StepSelector)

class RandomGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _walker.RandomGenerator_swiginit(self, _walker.new_RandomGenerator())

    def generateRandomNumber(self) -> "double":
        return _walker.RandomGenerator_generateRandomNumber(self)
    __swig_destroy__ = _walker.delete_RandomGenerator

# Register RandomGenerator in _walker:
_walker.RandomGenerator_swigregister(RandomGenerator)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _walker.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _walker.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _walker.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _walker.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _walker.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _walker.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _walker.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _walker.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _walker.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _walker.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _walker.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _walker.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _walker.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _walker.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _walker.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _walker.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _walker.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _walker:
_walker.SwigPyIterator_swigregister(SwigPyIterator)

class UIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _walker.UIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _walker.UIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _walker.UIntVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _walker.UIntVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _walker.UIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _walker.UIntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        return _walker.UIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _walker.UIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _walker.UIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _walker.UIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _walker.UIntVector_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _walker.UIntVector_append(self, x)

    def empty(self) -> "bool":
        return _walker.UIntVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _walker.UIntVector_size(self)

    def swap(self, v: "UIntVector") -> "void":
        return _walker.UIntVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _walker.UIntVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _walker.UIntVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _walker.UIntVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _walker.UIntVector_rend(self)

    def clear(self) -> "void":
        return _walker.UIntVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _walker.UIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _walker.UIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _walker.UIntVector_erase(self, *args)

    def __init__(self, *args):
        _walker.UIntVector_swiginit(self, _walker.new_UIntVector(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _walker.UIntVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _walker.UIntVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _walker.UIntVector_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _walker.UIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _walker.UIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _walker.UIntVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        return _walker.UIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _walker.UIntVector_capacity(self)
    __swig_destroy__ = _walker.delete_UIntVector

# Register UIntVector in _walker:
_walker.UIntVector_swigregister(UIntVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _walker.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _walker.FloatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _walker.FloatVector___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _walker.FloatVector___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _walker.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _walker.FloatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _walker.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _walker.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _walker.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _walker.FloatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _walker.FloatVector_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _walker.FloatVector_append(self, x)

    def empty(self) -> "bool":
        return _walker.FloatVector_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _walker.FloatVector_size(self)

    def swap(self, v: "FloatVector") -> "void":
        return _walker.FloatVector_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _walker.FloatVector_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _walker.FloatVector_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _walker.FloatVector_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _walker.FloatVector_rend(self)

    def clear(self) -> "void":
        return _walker.FloatVector_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _walker.FloatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _walker.FloatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _walker.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _walker.FloatVector_swiginit(self, _walker.new_FloatVector(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _walker.FloatVector_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _walker.FloatVector_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _walker.FloatVector_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _walker.FloatVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _walker.FloatVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _walker.FloatVector_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _walker.FloatVector_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _walker.FloatVector_capacity(self)
    __swig_destroy__ = _walker.delete_FloatVector

# Register FloatVector in _walker:
_walker.FloatVector_swigregister(FloatVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _walker.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _walker.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _walker.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _walker.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _walker.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _walker.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _walker.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _walker.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _walker.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _walker.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _walker.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _walker.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _walker.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _walker.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _walker.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _walker.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _walker.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _walker.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _walker.IntVector_rend(self)

    def clear(self) -> "void":
        return _walker.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _walker.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _walker.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _walker.IntVector_erase(self, *args)

    def __init__(self, *args):
        _walker.IntVector_swiginit(self, _walker.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _walker.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _walker.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _walker.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _walker.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _walker.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _walker.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _walker.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _walker.IntVector_capacity(self)
    __swig_destroy__ = _walker.delete_IntVector

# Register IntVector in _walker:
_walker.IntVector_swigregister(IntVector)

class SIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _walker.SIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _walker.SIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _walker.SIntVector___bool__(self)

    def __len__(self) -> "std::vector< size_t >::size_type":
        return _walker.SIntVector___len__(self)

    def __getslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "std::vector< size_t,std::allocator< size_t > > *":
        return _walker.SIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _walker.SIntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "void":
        return _walker.SIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _walker.SIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< size_t >::value_type const &":
        return _walker.SIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _walker.SIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< size_t >::value_type":
        return _walker.SIntVector_pop(self)

    def append(self, x: "std::vector< size_t >::value_type const &") -> "void":
        return _walker.SIntVector_append(self, x)

    def empty(self) -> "bool":
        return _walker.SIntVector_empty(self)

    def size(self) -> "std::vector< size_t >::size_type":
        return _walker.SIntVector_size(self)

    def swap(self, v: "SIntVector") -> "void":
        return _walker.SIntVector_swap(self, v)

    def begin(self) -> "std::vector< size_t >::iterator":
        return _walker.SIntVector_begin(self)

    def end(self) -> "std::vector< size_t >::iterator":
        return _walker.SIntVector_end(self)

    def rbegin(self) -> "std::vector< size_t >::reverse_iterator":
        return _walker.SIntVector_rbegin(self)

    def rend(self) -> "std::vector< size_t >::reverse_iterator":
        return _walker.SIntVector_rend(self)

    def clear(self) -> "void":
        return _walker.SIntVector_clear(self)

    def get_allocator(self) -> "std::vector< size_t >::allocator_type":
        return _walker.SIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _walker.SIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< size_t >::iterator":
        return _walker.SIntVector_erase(self, *args)

    def __init__(self, *args):
        _walker.SIntVector_swiginit(self, _walker.new_SIntVector(*args))

    def push_back(self, x: "std::vector< size_t >::value_type const &") -> "void":
        return _walker.SIntVector_push_back(self, x)

    def front(self) -> "std::vector< size_t >::value_type const &":
        return _walker.SIntVector_front(self)

    def back(self) -> "std::vector< size_t >::value_type const &":
        return _walker.SIntVector_back(self)

    def assign(self, n: "std::vector< size_t >::size_type", x: "std::vector< size_t >::value_type const &") -> "void":
        return _walker.SIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _walker.SIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _walker.SIntVector_insert(self, *args)

    def reserve(self, n: "std::vector< size_t >::size_type") -> "void":
        return _walker.SIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< size_t >::size_type":
        return _walker.SIntVector_capacity(self)
    __swig_destroy__ = _walker.delete_SIntVector

# Register SIntVector in _walker:
_walker.SIntVector_swigregister(SIntVector)



